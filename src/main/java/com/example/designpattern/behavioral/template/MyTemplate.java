package com.example.designpattern.behavioral.template;

/**
 * @Author: suxun
 * @Date: 2018/12/9 14:47
 * @Description: 模板模式
 * 定义一个操作中的算法的骨架,并允许子类为一个或多个步骤提供实现。
 * 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。
 * 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
 * 行为型
 * 适用场景
 * 一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现
 * 各子类中公共的行为被提取出来并集中到一个公共父类中，从而避免代码重复
 * 优点：
 * 复用型
 * 扩展性
 * 符合开闭原则
 * 缺点：
 * 类数量增加
 * 增加复杂度
 * 继承关系自身缺点，如果父类添加新方法，所有子类都要改
 * 扩展：
 * 钩子方法
 * 相关设计模式：
 * 工厂
 * 策略
 */
public interface MyTemplate {
}
