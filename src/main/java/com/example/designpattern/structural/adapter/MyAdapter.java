package com.example.designpattern.structural.adapter;

/**
 * @Author: suxun
 * @Date: 2018/12/2 19:14
 * @Description: 适配器模式
 * 将一个类的接口转换成客户希望的另外一个接口。
 * 适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
 * 结构型
 * 适用场景：
 * 已存在的类，他的方法和需求不匹配时（方法结果相同或者相似）
 * 不是软件设计阶段考虑的设计模式，是随着软件维护，由于不同产品，不同厂家造成功能类似而接口相同情况下的解决方案
 * 优点：
 * 增加了类的透明度，提高了类的复用而不需要改变
 * 目标类和适配器类解耦，提高程序扩展性
 * 符合开闭原则
 * 缺点：
 * 需要全面考虑，可能增加复杂度
 * 增加系统代码可读性
 * 过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现
 * 扩展：
 * 对象适配器-组合复用原则，使用委托机制
 * 类适配器-继承
 * 相关设计模式：
 * 外观：定义了新接口，粒度更大
 */
public interface MyAdapter {
}
