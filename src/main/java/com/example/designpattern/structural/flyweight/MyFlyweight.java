package com.example.designpattern.structural.flyweight;

/**
 * @Author: suxun
 * @Date: 2018/12/3 21:27
 * @Description: 享元模式
 * 提供了减少对象数量从而改善应用所需的对象结构的方式
 * 运用共享技术有效地支持大量细粒度的对象。
 * 结构型模式
 * 适用场景：
 * 常用于系统底层开发，以便解决系统的性能问题。
 * 系统有大量相似对象、需要缓存池
 * 优点：
 * 减少对象的创建，降低内存中对象的数量，降低系统的内存，提高效率
 * 减少内存之外其他资源的占用（时间，文件句柄...）
 * 缺点：
 * 关注内外部状态、关注线程安全问题
 * 使系统、程序的逻辑复杂化
 * 扩展：
 * 内部状态：外部怎么变内部都不变，享元对象的一种属性
 * 外部状态：
 * 相关设计模式：
 * 代理模式：代理一个类
 * 单例模式：容器单例，共享对象
 * 重要的使共享！！！
 */
public interface MyFlyweight {
}
