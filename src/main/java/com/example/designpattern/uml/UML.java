package com.example.designpattern.uml;

/**
 * @Author: suxun
 * @Date: 2018/11/18 17:08
 * @Description: uml
 * 统一建模语言(Unified Modeling Language,UML)
 * 非专利的第三代建模和规约语言
 * 特点：
 * UML一种开放的方法
 * 用于说明、可视化、构建和编写一个正在开发的面向对象的、软件密集系统的制品的开放方法
 * 展现了一系列最佳工程实践，这些最佳实践对大规模、复杂系统进行建模方面，特别是软件架构层次已经被验证有效
 * UML2.2分类14种图示:
 * 结构式图形：系统式建模
 * 行为式图形：系统模型中触发的事件
 * 交互式图形：行为式图形子集合，强调系统模型中资料流程
 * ·
 * 结构式图形：静态图（类图、对象图、包图）、实现图（组件图、部署图）、剖面图、复合结构图
 * 行为式图形：活动图、状态图、用例图
 * 交互式图形：通信图、交互概述图(UML2.0)、时序图(UML2.0)、时间图(UML2.0)
 * `
 * UML类图：
 * class diagram：用于表示类、接口、实例等之间相互的静态关系
 * 虽然叫类图，但类图中不只有类
 * ·
 * 记忆技巧：
 * UML箭头方向：从子类指向父类
 * 定义子类通过extends关键字指向父类，子类一定知道父类，但父类不知道子类的定义
 * 只有知道对方信息时才能指向对方，所以箭头方向是从子类指向父类
 * 记忆技巧-实线-继承|虚线-实现
 * 空心三角箭头：继承或实现
 * 实现-继承，is-a关系，扩展目的，不虚，很结实
 * 虚线-实现，代表"虚"无实体
 * 记忆技巧-实线-关联|虚线-依赖
 * 虚线-依赖关系：
 * ·临时用一下，若有若无，
 * ·表示一种使用关系，一个类需要借助另一个类来实现功能，
 * ·一般是一个类使用另一个类作为参数使用，或者作为返回值
 * 实线-关联关系：
 * ·关系稳定，实打实关系，
 * ·表示一个类对象和另一个类对象有关联
 * ·通常一个类中有另一个类对象作为属性
 * 记忆技巧-空心菱形-聚合|实心菱形-组合
 * ·菱形是一个盛东西的器皿
 * ·聚合：代表空器皿里可以放很多相同的东西，聚在一起（箭头方向所指的类）
 * ·组合：代表器皿里已经有实体结构的的存在，生死与共
 * 记忆技巧-空心菱形-聚合
 * ·整体和局部的关系，两者有独立的生命周期，是has a的关系
 * ·弱关系
 * ·消极的词：弱-空
 * 记忆技巧-实心菱形-组合
 * ·整体和局部的关系，和聚合的关心相比，关系更加强烈，两者有相同的生命周期，是contains-a关系
 * ·强关系
 * ·积极的词：强-满
 * 常见数字表达以及含义，假设有A类和B类，数字标在A类侧
 * ·0..1:0或1个实例
 * ·0..*:0或多个实例
 * ·1..1:1个实例
 * ·1   :只能有一个实例
 * ·1..*:至少有一个实例
 * `
 * UML时序图
 * Sequence Diagram：是显示对象之间交互的图，这些对象是按时间顺序排列的
 * 时序图中包括的建模元素主要有：对象(Actor)、生命线(Lifeline)、控制焦点(Focus of control)、消息(message)
 * `
 * 类图
 * ————————————————
 * | <<interface>>|说明是接口，也可以用棒棒糖表示法:「-o说人话」
 * |   类名字      | 抽象：字体是斜体
 * ----------------
 * |     属性      |
 * | +name:String | +最大权限public，-最小权限private，#protected，～default
 * |              | 权限 属性名 ： 属性类型
 * | _+sex:char_  |下划线代表static
 * ---------------
 * |+eat(food)   |
 * |+studyCourse[斜体]()| 斜体代表abstract 抽象方法
 * |+openMac():boolean| 权限 方法名(参数):返回值类型
 * |_+playGames()_|  下划线代表static
 * ———————————————
 * `
 * 回顾：
 * 定义 特点 分类 类图 时序图 记忆技巧
 */
public interface UML {
}
